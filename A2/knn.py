# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jsE5kegFExm1RWvpykLDlFHifoq43LxK
"""

from sklearn import datasets
import numpy as np

def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2)**2))

def get_neighbors(X_train, y_train, x_test, k):
    distances = []
    for i in range(len(X_train)):
        dist = euclidean_distance(x_test, X_train[i])
        distances.append((X_train[i], dist, y_train[i]))
    distances.sort(key=lambda x: x[1])
    neighbors = []
    for i in range(k):
        neighbors.append((distances[i][0], distances[i][2]))
    return neighbors

def predict(X_train, y_train, x_test, k):
    neighbors = get_neighbors(X_train, y_train, x_test, k)
    class_votes = {}
    for neighbor in neighbors:
        response = neighbor[1]
        if response in class_votes:
            class_votes[response] += 1
        else:
            class_votes[response] = 1
    sorted_votes = sorted(class_votes.items(), key=lambda x: x[1], reverse=True)
    return sorted_votes[0][0]

iris = datasets.load_iris()
X = iris.data
y = iris.target

split_index = int(0.8 * len(X))
X_train, y_train = X[:split_index], y[:split_index]
X_test, y_test = X[split_index:], y[split_index:]

k = 100
predictions = []
for i in range(len(X_test)):
    pred = predict(X_train, y_train, X_test[i], k)
    predictions.append(pred)

correct_predictions = sum(1 for pred, true in zip(predictions, y_test) if pred == true)
accuracy = correct_predictions / len(y_test)
print("Accuracy:", accuracy * 100)