# -*- coding: utf-8 -*-
"""Assignment 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A6uGj5x_BZhHhhM1WmzNS1jlg1LCykR2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

hour_data = pd.read_csv('hour.csv')

hour_data.dropna(inplace = True)

hour_data['dteday'] = pd.to_datetime(hour_data['dteday'])
hour_data['year'] = hour_data['dteday'].dt.year
hour_data['month'] = hour_data['dteday'].dt.month
hour_data['day'] = hour_data['dteday'].dt.day

hour_data = hour_data.drop('dteday', axis=1)

for column in ["season", "yr", "mnth", "hr", "holiday", "weekday", "workingday", "weathersit"]:
    if column not in hour_data.columns:
        hour_data[column] = np.nan
hour_data = pd.get_dummies(hour_data, columns=["season", "yr", "mnth", "hr", "holiday", "weekday", "workingday", "weathersit"], drop_first=True)

X = hour_data.drop("cnt", axis=1)
y = hour_data["cnt"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

ridge_model = Ridge(alpha = 0.1)
ridge_model.fit(X_train, y_train)

lasso_model = Lasso(alpha = 0.001, max_iter = 2000)
lasso_model.fit(X_train, y_train)

degree = 2
poly_model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
poly_model.fit(X_train, y_train)

def evaluate_model(model, X, y_true):
  y_pred = model.predict(X)
  mse = mean_squared_error(y_true, y_pred)
  mae = mean_absolute_error(y_true, y_pred)
  r2 = r2_score(y_true, y_pred)
  return mse, mae, r2

lr_mse, lr_mae, lr_r2 = evaluate_model(lr_model, X_test, y_test)

ridge_mse, ridge_mae, ridge_r2 = evaluate_model(ridge_model, X_test, y_test)

lasso_mse, lasso_mae, lasso_r2 = evaluate_model(lasso_model, X_test, y_test)

poly_mse, poly_mae, poly_r2 = evaluate_model(poly_model, X_test, y_test)

print("Linear Regression:")
print("MSE:", lr_mse)
print("MAE:", lr_mae)
print("R-Squared:", lr_r2)
print()

print("Ridge Regression:")
print("MSE:", ridge_mse)
print("MAE:", ridge_mae)
print("R-Squared:", ridge_r2)
print()

print("Lasso Regression:")
print("MSE:", lasso_mse)
print("MAE:", lasso_mae)
print("R-Squared:", lasso_r2)
print()



models = ['Linear Regression', 'Ridge Regression', 'Lasso Regression', 'Polynomial Regression']
mse_values = [lr_mse, ridge_mse, lasso_mse, poly_mse]
mae_values = [lr_mae, ridge_mae, lasso_mae, poly_mae]

plt.figure(figsize = (10, 6))
plt.bar(models, mse_values, color = 'blue', alpha = 0.5, label = 'MSE')
plt.bar(models, mae_values, color = 'orange', alpha = 0.5, label = 'MAE')
plt.xlabel('Models')
plt.ylabel('Error')
plt.title('Mean Squared Error (MSE) and Mean Absolute Error (MAE)')
plt.legend()
plt.show()

plt.figure(figsize = (10, 6))
plt.plot(models, mse_values, marker = 'o', color = 'blue', label = 'MSE')
plt.plot(models, mae_values, marker = 's', color = 'orange', label = 'MAE')
plt.xlabel('Models')
plt.ylabel('Error')
plt.title('Mean Squared Error (MSE) and Mean Absolute Error (MAE)')
plt.legend()
plt.grid(True)
plt.show