# -*- coding: utf-8 -*-
"""Lab11 Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lmbGTSSTBv5Du79jebpUPzTqgCYmI6ni
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

housing_data = pd.read_csv('Housing.csv')

housing_data.dropna(inplace = True)

housing_data = pd.get_dummies(housing_data, columns = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'parking', 'prefarea', 'furnishingstatus'], drop_first = True)

X = housing_data.drop('price', axis = 1)
y = housing_data['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

ridge_model = Ridge(alpha = 0.1)
ridge_model.fit(X_train, y_train)

lasso_model = Lasso(alpha = 0.001, max_iter = 2000)
lasso_model.fit(X_train, y_train)

degree = 2
poly_model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
poly_model.fit(X_train, y_train)

def evaluate_model(model, X, y_true):
  y_pred = model.predict(X)
  mse = mean_squared_error(y_true, y_pred)
  mae = mean_absolute_error(y_true, y_pred)
  r2 = r2_score(y_true, y_pred)
  return mse, mae, r2

lr_mse, lr_mae, lr_r2 = evaluate_model(lr_model, X_test, y_test)

ridge_mse, ridge_mae, ridge_r2 = evaluate_model(ridge_model, X_test, y_test)

lasso_mse, lasso_mae, lasso_r2 = evaluate_model(lasso_model, X_test, y_test)

poly_mse, poly_mae, poly_r2 = evaluate_model(poly_model, X_test, y_test)

print("Linear Regression:")
print("MSE:", lr_mse)
print("MAE:", lr_mae)
print("R-Squared:", lr_r2)
print()

print("Ridge Regression:")
print("MSE:", ridge_mse)
print("MAE:", ridge_mae)
print("R-Squared:", ridge_r2)
print()

print("Lasso Regression:")
print("MSE:", lasso_mse)
print("MAE:", lasso_mae)
print("R-Squared:", lasso_r2)
print()

print("Polynomial Regression (Degree = {}):".format(degree))
print("MSE:", poly_mse)
print("MAE:", poly_mae)
print("R-Squared:", poly_r2)

y_std = y_test.std()

lr_mse_norm = lr_mse / y_std**2
lr_mae_norm = lr_mae / y_std

ridge_mse_norm = ridge_mse / y_std**2
ridge_mae_norm = ridge_mae / y_std

lasso_mse_norm = lasso_mse / y_std**2
lasso_mae_norm = lasso_mae / y_std

poly_mse_norm = poly_mse / y_std**2
poly_mae_norm = poly_mae / y_std

print("Normalized MSE and MAE:")
print("Linear Regression:")
print("Normalized MSE:", lr_mse_norm)
print("Normalized MAE:", lr_mae_norm)
print()

print("Ridge Regression:")
print("Normalized MSE:", ridge_mse_norm)
print("Normalized MAE:", ridge_mae_norm)
print()

print("Lasso Regression:")
print("Normalized MSE:", lasso_mse_norm)
print("Normalized MAE:", lasso_mae_norm)
print()

print("Polynomial Regression (Degree={}):".format(degree))
print("Normalized MSE:", poly_mse_norm)
print("Normalized MAE:", poly_mae_norm)

models = ['Linear Regression', 'Ridge Regression', 'Lasso Regression', 'Polynomial Regression']
mse_values = [lr_mse_norm, ridge_mse_norm, lasso_mse_norm, poly_mse_norm]
mae_values = [lr_mae_norm, ridge_mae_norm, lasso_mae_norm, poly_mae_norm]

plt.figure(figsize = (10, 6))
plt.bar(models, mse_values, color = 'blue', alpha = 0.5, label = 'Normalized MSE')
plt.bar(models, mae_values, color = 'orange', alpha = 0.5, label = 'Normalized MAE')
plt.xlabel('Models')
plt.ylabel('Normalized Error')
plt.title('Normalized Mean Squared Error (MSE) and Mean Absolute Error (MAE)')
plt.legend()
plt.show()

plt.figure(figsize = (10, 6))
plt.plot(models, mse_values, marker = 'o', color = 'blue', label = 'Normalized MSE')
plt.plot(models, mae_values, marker = 's', color = 'orange', label = 'Normalized MAE')
plt.xlabel('Models')
plt.ylabel('Normlized Error')
plt.title('Normalized Mean Squared Error (MSE) and Mean Absolute Error (MAE)')
plt.legend()
plt.grid(True)
plt.show