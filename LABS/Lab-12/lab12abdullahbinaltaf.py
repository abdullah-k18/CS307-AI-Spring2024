# -*- coding: utf-8 -*-
"""Lab12AbdullahBinAltaf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12UAujEw902LccuEp1wXfGVHOaWumXNTD
"""

import numpy as np
import pandas as pd

data = pd.read_csv('play_tennis.csv')
data

data.drop(columns = ['day'], inplace = True)
data

data['play'].value_counts()

py = 9 / 14
pn = 5 / 14
print(py)
print(pn)

pon = 0
prn = 2 / 5
psn = 3 / 5

poy = 4 / 9
pry = 3 / 9
psy = 2 / 9

pcoolno = 1 / 5
photno = 2 / 5
pmildno = 2 / 5

pcoolyes = 3 / 9
photyes= 2 / 9
pmildyes= 4 / 9

pd.crosstab(data['humidity'], data['play'])

phighno= 4 / 5
pnormalno = 1 / 5

phighyes = 3 / 9
pnormalyes = 6 / 9

pd.crosstab(data['wind'], data['play'])

pstrongno = 3 / 5
pweakno = 2 / 5

pstrongyes = 3 / 9
pweakyes = 6 / 9

Pyes = psy * photyes * phighyes * pweakyes * py
Pno = psn * photno * phighno * pweakno * pn

print("Probability of yes",Pyes)
print("Probability of no",Pno)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB

label_encoders = {}
for column in data.columns:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

X = data.drop(['play'], axis=1)
y = data['play']

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X_train

y_train

nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
y_pred_nb = nb_model.predict(X_test)

y_pred_nb

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

y_pred_rf

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

def evaluate_model(y_test, y_pred):
    cm = confusion_matrix(y_test, y_pred)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')
    return cm, accuracy, precision, recall, f1

cm_nb, accuracy_nb, precision_nb, recall_nb, f1_nb = evaluate_model(y_test, y_pred_nb)
print("Naive Bayes Classifier:")
print("Confusion Matrix:\n", cm_nb)
print("Accuracy:", accuracy_nb)
print("Precision:", precision_nb)
print("Recall:", recall_nb)
print("F1 Score:", f1_nb)
print()

cm_rf, accuracy_rf, precision_rf, recall_rf, f1_rf = evaluate_model(y_test, y_pred_rf)
print("Random Forest Classifier:")
print("Confusion Matrix:\n", cm_rf)
print("Accuracy:", accuracy_rf)
print("Precision:", precision_rf)
print("Recall:", recall_rf)
print("F1 Score:", f1_rf)