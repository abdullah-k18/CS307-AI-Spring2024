# -*- coding: utf-8 -*-
"""AI Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1kfhQlzsEEE_HTw8qB19tsnA7FsNgPX
"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
import numpy as np

forest_fires = fetch_ucirepo(id=162)

X = forest_fires.data.features
y = forest_fires.data.targets

categorical_cols = X.select_dtypes(include=['object']).columns.tolist()

transformer = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_cols)
    ], remainder='passthrough')

X_encoded = transformer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

ridge_model = Ridge(alpha = 0.1)
ridge_model.fit(X_train, y_train)

lasso_model = Lasso(alpha = 0.001, max_iter = 2000)
lasso_model.fit(X_train, y_train)

knn_regressor = KNeighborsRegressor(n_neighbors=5)
knn_regressor.fit(X_train, y_train)

def evaluate_model(model, X, y_true):
    y_pred = model.predict(X)
    mad = mean_absolute_error(y_true, y_pred)
    return mad

lr_mad = evaluate_model(lr_model, X_test, y_test)

ridge_mad = evaluate_model(ridge_model, X_test, y_test)

lasso_mad = evaluate_model(lasso_model, X_test, y_test)

knn_mad = evaluate_model(knn_regressor, X_test, y_test)

print("Linear Regression:")
print("MAD:", lr_mad)
print()

print("Ridge Regression:")
print("MAD:", ridge_mad)
print()

print("Lasso Regression:")
print("MAD:", lasso_mad)
print()

print("KNN Regression:")
print("MAD:", knn_mad)
print()